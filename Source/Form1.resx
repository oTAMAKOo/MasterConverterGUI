<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQoYYCkKGGDFChhhTQoYYc0KG
        GIdChhiGQoYYh0KGGIBChhhlQoYYQ0KGGBsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQoYYFUKGGF9ChhilQoYY00KG
        GPRChhj/QoYY/0KGGP9Chhj/QoYY/0KGGP9ChhjlQoYYvUKGGIJChhgvQoYYBgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQoYYC0KGGFRChhjCQoYY9UKG
        GP9Chhj/QoYY/0KGGP9Chhj/QoYY/0KGGP9Chhj/QoYY/0KGGP9Chhj/QoYY/UKGGONChReMQYMVJQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEKGGB5ChhiTQoYY7kKG
        GP9Chhj/QoYY/0KGGP9Chhj/QoYY/0KGGP9Chhj/QoYY/0KGGP9Chhj/QocZ/0OKHf9EjiL/RZEm/0aT
        Kf1Hly3LSZ84UkyoRAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABChhgrQoYYtkKG
        GP1Chhj/QoYY/0KGGP9Chhj/QoYY/0KGGP9Chhj/QoYY/0KGGP9CiBr/RI0g/0aUKf9InDT/SaA5/0mh
        Ov9Kojv/SqI8/0qiPP9Koz3nSqM9bEqjPQgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQoYYJkKG
        GLlChhj/QoYY/0KGGP9Chhj/QoYY/0KGGP9Chhj/QoYY/0KGGP9Chxn/RI8j/0eZMP9JoDr/SqM9/0qj
        Pf9Koz3/SqM9/0qjPf9Koz3/SqM9/0qjPf9Koz3rSqM9bEqjPQQAAAAAAAAAAAAAAAAAAAAAAAAAAEKG
        GBZChhipQoYY/kKGGP9Chhj/QoYY/0KGGP9Chhj/QoYY/0KGGP9Chhj/RIsf/0eXLv9JoTr/SqM9/0qj
        Pf9Koz3/SqM9/0qjPf9Koz3/SqM9/0qjPf9Koz3/SqM9/0qjPf9Koz3nSqM9UkqjPQEAAAAAAAAAAAAA
        AABChhgEQoYYd0KGGPlChhj/QoYY/0KGGP9Chhj/QoYY/0KGGP9Chhj/QoYY/0WPJP9Jnjf/SqM9/Uqj
        PfxKoz38SqM9/0qjPf9Koz3/SqM9/0qjPf9Koz3/SqM9/0qjPf9Koz3/SqM9/0qjPf9Koz3LSqM9JQAA
        AAAAAAAAAAAAAEKGGDhChhjgQoYY/0KGGP9Chhj/QoYY/0KGGP9Chhj/QoYY/0KHGf9Gkib+SaA54Eqj
        PapKoz11SqM9XEqjPWNKoz2OSqM9yUqjPfJKoz3/SqM9/0qjPf9Koz3/SqM9/0qjPf9Koz3/SqM9/0qj
        PfxKoz2MSqM9BwAAAABChhgHQoYYlEKGGP5Chhj/QoYY/0KGGP9Chhj/QoYY/0KGGP9Chxn/RZEl8Emf
        OJlKpD40SqM+BUqjPQEAAAAAAAAAAEqjPQJKoz0TSqM9Y0qjPc9Koz3/SqM9/0qjPf9Koz3/SqM9/0qj
        Pf9Koz3/SqM9/0qjPeNKoz0uAAAAAEKGGDNChhjXQoYY/0KGGP9Chhj/QoYY/0KGGP9Chhj/QoYY/0SO
        IuxInDVrSqVADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABKoz0ASqM9LUqjP7xKoz7/SqM9/0qj
        Pf9Koz3/SqM9/0qjPf9Koz3/SqM9+0qjPYJKoz0CQoYYa0KGGPxChhj/QoYY/0KGGP9Chhj/QoYY/0KG
        GP9DiBv1RpUreE6wTgUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASKRaNkqj
        Q9dKoz3/SqM9/0qjPf9Koz3/SqM9/0qjPf9Koz3/SqM9vkqjPRtChhipQoYY/0KGGP9Chhj/QoYY/0KG
        GP9Chhj/QoYY/0KGGb5EjiMTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABHpXIDSaNIakqjPvRKoz3/SqM9/0qjPf9Koz3/SqM9/0qjPf9Koz3lSqM9QkKGGN1Chhj/QoYY/0KG
        GP9Chhj/QoYY/0KGGP9Chhj8QoYYYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABIpEYSR6VDyUqjPf9Koz3/SqM9/0qjPf9Koz3/SqM9/0qjPf5Koz1lQoYY+UKG
        GP9Chhj/QoYY/0KGGP9Chhj/QoYY/0KGGOJChhgsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB27jwI/qVGOSaQ//kqjPf9Koz3/SqM9/0qjPf9Koz3/SqM9/0qj
        PYBChhn/QoYY/0KGGP9Chhj/QoYY/0KGGP9Chhj/QoYYwUKGGBoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//ADitYGNEpkn8SqM8/0qjPf9Koz3/SqM9/0qj
        Pf9Koz3/SqM9hz2TMv9Chhj/QoYY/0KGGP9Chhj/QoYY/0KGGP9Chhi8QoYYGAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMq9rXD2pVfxKoz7/SqM9/0qj
        Pf9Koz3/SqM9/0qjPf9Koz2GNKle/z2SMP9Chhj/QoYY/0KGGP9Chhj/QoYY/0KGGNBChhghAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADKvagExr2t1OKxf/Uik
        Qv9Koz3/SqM9/0qjPf9Koz3/SqM9/0qjPYcyr2vyNahb/z6QLP9Chhj/QoYY/0KGGP9Chhj/QoYY8kKG
        GD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMq9qBTKv
        aqozrmf/RaVG/0qjPP9Koz3/SqM9/0qjPf9Koz3/SqM9dDKvaskysGv/Nadb/z6RLv9Chhj/QoYY/0KG
        GP9Chhj/QoYYjkKGGAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAyr2ozMq9q4DKvav9Cp0z/SqM9/0qjPf9Koz3/SqM9/0qjPfRKoz1TMq9qkTKvav8yr2v/NKld/zyV
        Nv9Chxr/QoYX/0KGGP9ChhjgQoYYOgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAMq9qDjKvapkyr2r8Mq9q/z+pUv9Koz3/SqM9/0qjPf9Koz3/SqM900qjPTEyr2pPMq9q7TKv
        av8yr2v/M61l/zieSf8/jif/QoYZ/0KGF/5Chhi4QoYYJgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAADKvagUyr2prMq9q8TKvav8yr2r/PalV/0qjPf9Koz3/SqM9/0qjPf9Koz2lSqM9CzKv
        ahoyr2q8Mq9q/zKvav8yr2r/Mq9q/zSpXv86m0P/P44o/0KHGf9Chhi4Q4QTOk5nAAMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAyr2oUMq9qeDKvausyr2r/Mq9q/zKvav89qVX/SqM9/0qjPf9Koz3/SqM99kqj
        PV8AAAAAMq9qATKvamcyr2r1Mq9q/zKvav8yr2r/Mq9r/zKvav80qmD/OKFN/zyWOf8/jyrgP48pjj2T
        MT8+kjAhOpxDGDOtZhoyr2osMq9qYDKvar4yr2r3Mq9q/zKvav8yr2r/Mq9q/z2pVf9Koz3/SqM9/0qj
        Pf9Koz3CSqM9FQAAAAAAAAAAMq9qFTKvaroyr2r/Mq9q/zKvav8yr2r/Mq9q/zKva/8yr2r/Mq9p/zOs
        ZP81pln/NqRV8jalVtA0qmC8Mq5pwjKvauIyr2r8Mq9q/zKvav8yr2r/Mq9q/zKvav8yr2r/P6lS/0qj
        Pf9Koz3/SqM970qjPVMAAAAAAAAAAAAAAAAyr2oBMq9qQjKvat8yr2r/Mq9q/zKvav8yr2r/Mq9q/zKv
        av8yr2r/Mq9q/zKva/8yr2v/Mq9r/zKvav8yr2r/Mq9q/zKvav8yr2r/Mq9q/zKvav8yr2r/Mq9q/zKv
        av9Cp0z/SqM9/0qjPf1Koz2TSqM9CwAAAAAAAAAAAAAAAAAAAAAyr2oBMq9qZDKvau4yr2r/Mq9q/zKv
        av8yr2r/Mq9q/zKvav8yr2r/Mq9q/zKvav8yr2r/Mq9q/zKvav8yr2r/Mq9q/zKvav8yr2r/Mq9q/zKv
        av8yr2r/NK5n/0WlRv9Kozz/SqM9tkqjPR0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyr2oIMq9qbzKv
        au8yr2r/Mq9q/zKvav8yr2r/Mq9q/zKvav8yr2r/Mq9q/zKvav8yr2r/Mq9q/zKvav8yr2r/Mq9q/zKv
        av8yr2r/Mq9q/zKva/84rF//R6RC/0qjPLlKoz0rAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAyr2oHMq9qZDKvat8yr2r/Mq9q/zKvav8yr2r/Mq9q/zKvav8yr2r/Mq9q/zKvav8yr2r/Mq9q/zKv
        av8yr2r/Mq9q/zKvav8yr2r/Mq9q/z2qVvlKoz6pSqM8JwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAyr2oCMq9qQjKvarkyr2r2Mq9q/zKvav8yr2r/Mq9q/zKvav8yr2r/Mq9q/zKv
        av8yr2r/Mq9q/zKvav8yr2r/Mq9q/zKvav8yr2ngO6tYd06hOBUAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMq9qFTKvamcyr2q8Mq9q7jKvav8yr2r/Mq9q/zKv
        av8yr2r/Mq9q/zKvav8yr2r/Mq9q/zKvavwyr2rWMq9qlDKvajkntYECAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADKvahoyr2pQMq9qjDKv
        asYyr2ryMq9q/zKvav8yr2r/Mq9q/DKvauEyr2qpMq9qazKvajQyr2oGAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/8AH//8AAP/8AAA/+AAAH/AAAA/gAAAHwAAAA4AAAAOAAAABAAGAAQAP
        4AAAH/gAAD/4AAB//AAAf/wAAH/8AAB//gAAf/wAAH/8AAA//AAAP/gAAB/wAAAH4AEAAAABgAAAA4AA
        AAPAAAAH4AAAD/AAAB/4AAA//gAAf/+AAf8=
</value>
  </data>
</root>